"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[4592],{1786:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-76143d78",path:"/server/node.html",title:"node",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"动态刷新node服务器的插件",slug:"动态刷新node服务器的插件",children:[]},{level:2,title:"Restful",slug:"restful",children:[]},{level:2,title:"koa的洋葱模型",slug:"koa的洋葱模型",children:[]},{level:2,title:"函数列表",slug:"函数列表",children:[]}],filePathRelative:"server/node.md",git:{updatedTime:1655460891e3,contributors:[]}}},6944:(n,s,e)=>{e.r(s),e.d(s,{default:()=>g});var a=e(6252),t=e(2580),l=e(1428);const o=(0,a._)("h1",{id:"node",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#node","aria-hidden":"true"},"#"),(0,a.Uk)(" node")],-1),r=(0,a._)("p",null,[(0,a.Uk)("入门参考文档：点击"),(0,a._)("a",{href:"https://www.nodebeginner.org/index-zh-cn.html",target:"_blank"},"这里")],-1),i=(0,a._)("h3",{id:"动态刷新node服务器的插件",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#动态刷新node服务器的插件","aria-hidden":"true"},"#"),(0,a.Uk)(" 动态刷新node服务器的插件")],-1),c=(0,a._)("p",null,[(0,a.Uk)("用法："),(0,a._)("code",null,"nodemon practice.js")],-1),_=(0,a._)("h2",{id:"restful",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#restful","aria-hidden":"true"},"#"),(0,a.Uk)(" Restful")],-1),u=(0,a._)("p",null,"接口访问的地址路径相同，只是method不同。",-1),p=(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"GET"),(0,a.Uk)("获取列表")]),(0,a._)("li",null,[(0,a._)("code",null,"POST"),(0,a.Uk)("提交表单")]),(0,a._)("li",null,[(0,a._)("code",null,"PUT"),(0,a.Uk)("修改表单")]),(0,a._)("li",null,[(0,a._)("code",null,"DELETE"),(0,a.Uk)("删除记录")])],-1),k=(0,a._)("h2",{id:"koa的洋葱模型",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#koa的洋葱模型","aria-hidden":"true"},"#"),(0,a.Uk)(" koa的洋葱模型")],-1),b=(0,a._)("p",null,[(0,a._)("img",{src:t,alt:"yunsuanfu"}),(0,a._)("br"),(0,a._)("img",{src:l,alt:"yunsuanfu"}),(0,a._)("br"),(0,a.Uk)(" Koa 的洋葱模型指的是以 next() 函数为分割点，先由外到内执行 Request 的逻辑，再由内到外执行 Response 的逻辑。通过洋葱模型，将多个中间件之间通信等变得更加可行和简单。其实现的原理并不是很复杂，主要是 compose 方法。")],-1),d=(0,a._)("h2",{id:"函数列表",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#函数列表","aria-hidden":"true"},"#"),(0,a.Uk)(" 函数列表")],-1),m=(0,a._)("ul",null,[(0,a._)("li",null,"process是node的全局变量。"),(0,a._)("li",null,[(0,a.Uk)("path.resolve()"),(0,a._)("br"),(0,a.Uk)(" path.resolve 这个方法通过解析一系列字符串，最终返回一个绝对路径。关键在于绝对路径。"),(0,a._)("br"),(0,a.Uk)(" 解析的方式是从右向左，直到拼成一个绝对路径就自动停止。"),(0,a._)("br"),(0,a.Uk)(" 如果全部路径都拼完了，还没有形成绝对路径，那就把当前路径加上。"),(0,a._)("br"),(0,a.Uk)(" 如果没有参数，path.resolve()返回当前路径。"),(0,a._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,a._)("pre",{class:"language-javascript"},[(0,a._)("code",null,[(0,a.Uk)("path"),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token function"},"resolve"),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token string"},"'/foo'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'/bar'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'baz'"),(0,a._)("span",{class:"token punctuation"},")"),(0,a.Uk)(),(0,a._)("span",{class:"token comment"},"//Returns: 返回/bar/baz"),(0,a.Uk)("\n 处理过程为，从右向左\n baz 不是绝对路径， 加上上一个参数变成 "),(0,a._)("span",{class:"token operator"},"/"),(0,a.Uk)("bar"),(0,a._)("span",{class:"token operator"},"/"),(0,a.Uk)("baz 就是已经绝对路径了，\n 所以第一个参数 "),(0,a._)("span",{class:"token string"},"'/foo'"),(0,a.Uk)(" 就用不上了。\n\n path"),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token function"},"resolve"),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token string"},"'/foo/bar'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'./baz'"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a._)("span",{class:"token comment"},"// Returns: '/foo/bar/baz'"),(0,a.Uk)("\n\n path"),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token function"},"resolve"),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token string"},"'/foo/bar'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'/tmp/file/'"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a._)("span",{class:"token comment"},"// Returns: '/tmp/file'"),(0,a.Uk)("\n "),(0,a._)("span",{class:"token comment"},"// 最后一个参数直接就是绝对路径，第一个参数就用不上了。"),(0,a.Uk)("\n\n path"),(0,a._)("span",{class:"token punctuation"},"."),(0,a._)("span",{class:"token function"},"resolve"),(0,a._)("span",{class:"token punctuation"},"("),(0,a._)("span",{class:"token string"},"'wwwroot'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'static_files/png/'"),(0,a._)("span",{class:"token punctuation"},","),(0,a.Uk)(),(0,a._)("span",{class:"token string"},"'../gif/image.gif'"),(0,a._)("span",{class:"token punctuation"},")"),(0,a._)("span",{class:"token punctuation"},";"),(0,a.Uk)("\n "),(0,a._)("span",{class:"token comment"},"// If the current working directory is /home/myself/node,"),(0,a.Uk)("\n "),(0,a._)("span",{class:"token comment"},"// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'"),(0,a.Uk)("\n\n 这几个参数都解析完之后是\n "),(0,a._)("span",{class:"token string"},"'wwwroot/static_files/png/../gif/image.gif'"),(0,a.Uk)("\n 这并不是一个绝对路径，所以把当前路径加到最前面。\n 就变成了\n "),(0,a._)("span",{class:"token string"},"'/home/myself/node/wwwroot/static_files/png/../gif/image.gif'"),(0,a.Uk)("\n 简化一下就是\n "),(0,a._)("span",{class:"token string"},"'/home/myself/node/wwwroot/static_files/gif/image.gif'"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br")])])]),(0,a._)("li",null,"__dirname 是node的一个全局变量，获得当前文件所在目录的完整目录名。")],-1),g={render:function(n,s){return(0,a.wg)(),(0,a.iD)(a.HY,null,[o,r,i,c,_,u,p,k,b,d,m],64)}}},2580:(n,s,e)=>{n.exports=e.p+"assets/img/koa洋葱模型.2fd052f9.jpg"},1428:(n,s,e)=>{n.exports=e.p+"assets/img/koa洋葱模型调用流程.4d424a49.jpg"}}]);