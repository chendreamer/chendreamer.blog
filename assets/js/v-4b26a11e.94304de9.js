"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[1878],{8076:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4b26a11e",path:"/accumulation/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",title:"正则表达式",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"accumulation/正则表达式.md",git:{updatedTime:1672214418e3,contributors:[]}}},1046:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h1><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank">MDN正则表达式参考文档</a></p></li><li><p><a href="https://blog.51cto.com/u_15573663/5235997" target="_blank">正则表达式总结</a></p></li><li><p>正则表达式是被用来匹配字符串中的字符组合的模式</p></li><li><p>在JavaScript中，正则表达式也是对象</p></li><li><p>这种模式可以被用于 RegExp 的 exec 和 test 方法</p></li><li><p>以及 String 的 match、replace、search 和 split 方法</p></li></ul><p><strong>创建一个正则表达式</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>字面量\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">http\\:\\/{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\nre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;http://jobs.douban.com&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n\n\n构造函数\n<span class="token comment">//用构造函数创建正则往往要对特殊字符双重转义var re = new RegExp(&#39;http\\\\:\\\\/{2}&#39;); </span>\nre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;http://jobs.douban.com&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n\n<span class="token comment">//ES6允许用第二个参数覆盖默认的标志修饰符，ES5则会报错</span>\n<span class="token keyword">var</span> re2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//i</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">所属</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">exec</td><td style="text-align:center;">RegExp</td><td style="text-align:center;">在字符串中查找匹配，返回一个特殊数组（未匹配到则返回null）</td></tr><tr><td style="text-align:center;">test</td><td style="text-align:center;">RegExp</td><td style="text-align:center;">在字符串中测试是否匹配，返回true或false</td></tr><tr><td style="text-align:center;">match</td><td style="text-align:center;">String</td><td style="text-align:center;">在字符串中查找匹配，返回一个特殊数组或者在未匹配到时返回null</td></tr><tr><td style="text-align:center;">search</td><td style="text-align:center;">String</td><td style="text-align:center;">在字符串中测试匹配，返回匹配到的位置索引，或者在失败时返回-1</td></tr><tr><td style="text-align:center;">replace</td><td style="text-align:center;">String</td><td style="text-align:center;">在字符串中查找匹配，并且使用替换字符串替换掉匹配到的子字符串</td></tr><tr><td style="text-align:center;">split</td><td style="text-align:center;">String</td><td style="text-align:center;">使用正则或字符串分隔一个字符串，并将分隔后的子字符串存储为数组</td></tr></tbody></table><p><strong>常用特殊字符</strong></p><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">/</td><td style="text-align:center;">将其后的特殊字符，转义为字面量</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">匹配输入的开始。如果多行标志被设置为true，那么也匹配换行符后紧跟的位置</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配输入的结束。如果多行标示被设置为true，那么也匹配换行符前的位置</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">匹配前面一个表达式0次或多次。等价于 {0,}</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">匹配前面一个表达式1次或者多次。等价于 {1,}</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">匹配前面一个表达式0次或者1次。等价于 {0,1}。也用于设置贪婪模式和向前断言(正向查找)</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配除了换行符（\\n）之外的任何单个字符</td></tr><tr><td style="text-align:center;">(x)</td><td style="text-align:center;">匹配 &#39;x&#39; 并且记住匹配项。括号被称为 捕获括号</td></tr><tr><td style="text-align:center;">(?:x)</td><td style="text-align:center;">匹配 &#39;x&#39; 但是不记住匹配项。这种叫作非捕获括号</td></tr><tr><td style="text-align:center;">x(?=y)</td><td style="text-align:center;">匹配&#39;x&#39;仅仅当&#39;x&#39;后面跟着&#39;y&#39;。这种叫做正向肯定查找</td></tr><tr><td style="text-align:center;">x(?!y)</td><td style="text-align:center;">匹配&#39;x&#39;仅仅当&#39;x&#39;后面不跟着&#39;y&#39;。这个叫做正向否定查找</td></tr><tr><td style="text-align:center;">x|y</td><td style="text-align:center;">匹配&#39;x&#39;或者&#39;y&#39;</td></tr><tr><td style="text-align:center;">{n}</td><td style="text-align:center;">n是一个正整数，匹配了前面一个字符刚好发生了n次</td></tr><tr><td style="text-align:center;">{n,m}</td><td style="text-align:center;">n 和 m 都是正整数。匹配前面的字符至少n次，最多m次</td></tr><tr><td style="text-align:center;">[xyz]</td><td style="text-align:center;">一个字符集合。匹配方括号的中任意字符。可用-指定字符范围</td></tr><tr><td style="text-align:center;">[^xyz]</td><td style="text-align:center;">一个反向字符集。匹配任何没有包含在方括号中的字符</td></tr><tr><td style="text-align:center;">[\\b]</td><td style="text-align:center;">匹配一个退格(U+0008)</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配一个词的边界，如/oon\\b/匹配&quot;moon&quot;中的&#39;oon&#39;</td></tr><tr><td style="text-align:center;">\\B</td><td style="text-align:center;">匹配一个非单词边界，如/y\\B./匹配&quot;possibly yesterday&quot;中的ye</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配一个数字。等价于[0-9]</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:center;">匹配一个换页符 (U+000C)</td></tr><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">匹配一个换行符 (U+000A)</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">匹配一个回车符 (U+000D)</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配一个空白字符，包括空格、制表符、换页符和换行符</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配一个非空白字符</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">匹配一个水平制表符 (U+0009)，一般相当于按下键盘TAB键的效果</td></tr><tr><td style="text-align:center;">\\v</td><td style="text-align:center;">匹配一个垂直制表符 (U+000B)，就像一下打了几个回车，且列数对齐一样</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">匹配一个单字字符（字母、数字或者下划线）。等价于[A-Za-z0-9_]</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配一个非单字字符。等价于[^A-Za-z0-9_]</td></tr><tr><td style="text-align:center;">\\0</td><td style="text-align:center;">匹配 NULL (U+0000) 字符</td></tr><tr><td style="text-align:center;">\\xhh</td><td style="text-align:center;">匹配对应16进制编码的字符。如 /\\x41\\s\\d/ 可以匹配 &#39;A 9&#39;</td></tr><tr><td style="text-align:center;">\\uhhhh</td><td style="text-align:center;">匹配Unicode字符。如 /\\u03A9\\sab/ 可以匹配 &#39;Ω ab&#39;</td></tr></tbody></table><p><strong>正则表达式标志修饰符</strong></p><table><thead><tr><th style="text-align:center;">标志</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">g</td><td style="text-align:center;">全局搜索</td></tr><tr><td style="text-align:center;">i</td><td style="text-align:center;">不区分大小写搜索</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;">多行搜索</td></tr><tr><td style="text-align:center;">y</td><td style="text-align:center;">ES6新增，执行“粘性”搜索，匹配从目标字符串的当前位置开始</td></tr><tr><td style="text-align:center;">u</td><td style="text-align:center;">ES6新增，含义为“Unicode模式”，会正确处理四个字节的UTF-16编码（大于\\uFFFF）</td></tr></tbody></table><p><strong>每个RegExp实例都具有以下属性</strong><br> global //是否设置了g<br> ignoreCase //是否设置了i<br> multiline //是否设置了m<br> lastIndex //0开始的整数，开始搜索下一个匹配项的位置<br> source //正则字面量的字符串表示<br> sticky //ES6新增，表示是否设置了y修饰符<br> flags //ES6新增，会返回正则表达式的修饰符</p><hr><p><strong>例子</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回 <span class="token keyword">null</span> 或 <span class="token function">一个特殊数组</span><span class="token punctuation">(</span>有index和input属性<span class="token punctuation">)</span>\n<span class="token keyword">var</span> exec <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc\\s\\&quot;h\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;helloabc &quot;h2elloabc&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;abc &quot;h2&quot;]</span>\nexec<span class="token punctuation">.</span>index <span class="token comment">// 5</span>\nexec<span class="token punctuation">.</span>input <span class="token comment">// &#39;helloabc &quot;h2elloabc&quot;&#39;</span>\n\n<span class="token comment">//在global情况下</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\del</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> txt <span class="token operator">=</span> <span class="token string">&#39;1ello, 2elabc&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;1el&quot;], index: 0, input: &quot;1ello, 2elabc&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;2el&quot;], index: 7, input: &quot;1ello, 2elabc&quot;</span>\n\n标志修饰符\n<span class="token comment">//特殊字符`𐐷`, 编码U+10437</span>\n<span class="token operator">/</span>𐐷<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">/</span>u<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;𐐷𐐷&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>\n<span class="token operator">/</span>𐐷<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;𐐷𐐷&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>\n\n<span class="token comment">//y和g的区别在于不是紧跟着的粘连模式，相当于隐含的^头部匹配</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;applewatch&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;a&#39;] index:0</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;a&#39;] index:6</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>\n<span class="token keyword">var</span> re2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>\nre2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;a&#39;] index:0</span>\nre2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>\n\n<span class="token function">调用exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">或test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>后，最多<span class="token number">9</span>个构造函数属性被自动填充为 RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>RegExp<span class="token punctuation">.</span>$<span class="token number">9</span>，存放括号中匹配的项\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\de(l.))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> txt <span class="token operator">=</span> <span class="token string">&#39;1ello, 2elabc&#39;</span><span class="token punctuation">;</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#39;1ell&#39;, &#39;ll&#39;</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#39;2ela&#39;, &#39;la&#39;</span>\n\n用<span class="token keyword">function</span>作为replace方法第二个参数\n<span class="token class-name">可以指定一个函数作为String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>第二个参数\n当匹配执行后， 该函数就会执行。 函数的返回值作为替换字符串\n该函数的参数为：match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token operator">...</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> string\n    match <span class="token operator">:</span> 匹配的子串\n    p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3 <span class="token operator">...</span> <span class="token operator">:</span> 括号分组中匹配的字符串（对应于 $<span class="token number">1</span>，$<span class="token number">2</span>，$<span class="token number">3</span> 等）\n    offset <span class="token operator">:</span> 匹配到的子字符串在原字符串中的偏移量\n    string <span class="token operator">:</span> 被匹配的原字符串\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;吃葡萄不吐putao皮，不吃putao倒吐葡萄皮～&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">葡萄|putao</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">pt</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token string">&#39;苹果&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//葡萄</span>\n<span class="token comment">//putao</span>\n<span class="token comment">//putao</span>\n<span class="token comment">//葡萄</span>\n<span class="token comment">//str2 == &quot;吃苹果不吐苹果皮，不吃苹果倒吐苹果皮～&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p><strong>一些常用的正则表达式</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//中文、英文、数字及下划线</span>\n<span class="token operator">^</span><span class="token punctuation">[</span>\\u4e00<span class="token operator">-</span>\\u9fa5_a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$\n\n<span class="token comment">//中国邮政编码</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>\n\n<span class="token comment">//email地址</span>\n<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@<span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">+</span>$<span class="token operator">/</span><span class="token punctuation">;</span>\n\n<span class="token comment">//根据useragent判断是否ios</span>\n<span class="token operator">/</span><span class="token function">iP</span><span class="token punctuation">(</span>od<span class="token operator">|</span>ad<span class="token operator">|</span>hone<span class="token punctuation">)</span>\\<span class="token punctuation">;</span><span class="token operator">?.</span><span class="token operator">*</span>\\sOS\\<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\\_0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">/</span>\n\n\n<span class="token comment">//去掉首位空格</span>\nstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\\s+|\\s+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">//格式化手机号</span>\ntel<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.{4})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1 &#39;</span><span class="token punctuation">)</span> <span class="token comment">//&quot;1332 3385 333&quot;</span>\n\n\n<span class="token doc-comment comment">/**\n * 获取基于模板的文本值\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">tmpl</span> - 文本模板，格式为 &#39;hello<span class="token punctuation">{</span>0<span class="token punctuation">}</span>,world<span class="token punctuation">{</span>1<span class="token punctuation">}</span>&#39;\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">...</span>String<span class="token punctuation">}</span></span> <span class="token parameter">args</span> - 用于替换的若干参数\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">read_i18n</span><span class="token punctuation">(</span><span class="token parameter">tmpl<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> rtn <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> flagArr <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\d+\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{1},{0},{2}...</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flagArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flagArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                rtn <span class="token operator">=</span> rtn<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\{&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;\\\\}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> rtn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">read_i18n</span><span class="token punctuation">(</span><span class="token string">&#39;hello{0}world{1}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;:)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hello!world:)&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p><strong>贪婪模式和懒惰模式</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> txt <span class="token operator">=</span> <span class="token string">&#39;&lt;a href=”http://google.com”&gt;谷歌&lt;/a&gt;&lt;a href=”http://baidu.com”&gt;百度&lt;/a&gt;&#39;</span>\n<span class="token keyword">var</span> re1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\&lt;a (.*?)\\&lt;\\/a\\&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">//懒惰模式，尽可能少的匹配</span>\n<span class="token keyword">var</span> re2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\&lt;a (.*)\\&lt;\\/a\\&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">//贪婪模式，尽可能多的匹配, 区别在不加问号</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">//[&quot;&lt;a href=”http://google.com”&gt;谷歌&lt;/a&gt;&quot;, &quot;href=”http://google.com”&gt;谷歌&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//[&quot;&lt;a href=”http://baidu.com”&gt;百度&lt;/a&gt;&quot;, &quot;href=”http://baidu.com”&gt;百度&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//[&quot;&lt;a href=”http://google.com”&gt;谷歌&lt;/a&gt;&lt;a href=”http://baidu.com”&gt;百度&lt;/a&gt;&quot;, </span>\n<span class="token comment">//&quot;href=”http://google.com”&gt;谷歌&lt;/a&gt;&lt;a href=”http://baidu.com”&gt;百度&quot;]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>捕获和非捕获分组</strong></p><ul><li><p>一般的括号被称为捕获分组</p><ul><li>/(foo) (bar) \\1 \\2/ 中的 &#39;(foo)&#39; 和 &#39;(bar)&#39; 匹配并记住字符串 &quot;foo bar foo bar&quot; 中前两个单词。</li><li>模式中的后向引用 \\1 和 \\2 匹配字符串的后两个单词。注意 \\1、\\2、\\n 是用在正则表达式的匹配环节。</li><li>在正则表达式的替换环节，则要使用像 $1、$2、$n 这样的语法，例如，&#39;bar foo&#39;.replace( /(...) (...)/, &#39;$2 $1&#39; )。</li></ul></li><li><p>(?:x)模式的括号被成为非捕获分组，从而不让这个分组被类似 macth exec 这样的函数所获取到</p></li></ul><p>var reg = /test(?:\\d)+/;<br> var str = &#39;new test001 test002&#39;;<br> console.log(str.match(reg));<br> //[&quot;test001&quot;, index: 4, input: &quot;new test001 test002&quot;]</p><p><strong>工作原理</strong></p><ol><li>创建正则表达式后，浏览器检查无误后将其 编译 成本机代码；如果将正则赋给一个变量，可以避免重复执行此步骤</li><li>正则表达式开始工作时， 起始位置 位于字符串的开头或由正则的lastIndex指定；匹配失败后起始位置则重置到最后一次尝试的后一个字符上</li><li>根据目标字符串和正则模版 逐个搜索 ，匹配失败后 回溯(sù) 到该次扫描之前的位置上，并尝试其他可能的分支</li><li>在字符串的当前位置上的所有可能分支都尝试失败后，回到第二步；字符串中每个字符（包括结尾位置）都无法匹配则彻底失败</li></ol><p><strong>理解回溯</strong></p><ul><li>回溯是正则匹配的基础组成部分，但代价也很昂贵，尽量减少其使用频率，才能编写高效的表达式</li><li>正则表达式扫描目标注字符串时，从左到右逐个测试其组成部分，看是否能找到匹配项</li><li>对每个量词(诸如*,+?或{2,})和分支都必须决定接下来如何处理</li><li>每当正则表达式做决定时，如果有必要的话，都会记住其他选择，以备返回时使用</li><li>如果当前选项找不到匹配值，或后面的部分匹配失败，那么正则表达式会回溯到最后一个决策点，然后在剩余的选项中选择一个。这个过程直到最终匹配成功或匹配失败</li></ul><p><strong>分支与回溯</strong><br> /h(ello|appy) hippo/.test(&quot;hello there, happy hippo&quot;);</p><ol><li>匹配第一个h，成功</li><li>匹配子表达式中的第一个分支，成功</li><li>匹配空格，成功</li><li>匹配t，失败</li><li>尝试2中的另一个分支，第一个字母的匹配都失败了</li><li>回退到第一个字母后面的位置，依次向右挨个字母重复上述匹配</li><li>知道第14个字母h，又匹配成功正则中第一个h</li><li>重复2至5的过程，匹配了子表达式中第二个分支appy</li><li>接下来匹配了整个正则</li><li>得到了匹配的字符串 &quot;happy hippo&quot;</li></ol><p><strong>重复与回溯</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var re1 = /&lt;p&gt;.*&lt;\\/p&gt;/i;  \nvar re2 = /&lt;p&gt;.*?&lt;\\/p&gt;/i; //非贪婪（懒惰）  \nvar str1 = &quot;&lt;p&gt;Para.1.&lt;/p&gt;&lt;img src=&#39;smiley.jpg&#39;&gt;&lt;p&gt;Para.2.&lt;/p&gt;&lt;div&gt;Div.&lt;/div&gt;&quot;;  \nvar str2 = &quot;&lt;p&gt;Para.1.&lt;/p&gt;&quot;;  \n参考上面“贪婪模式和懒惰模式”部分的说明  \n贪婪模式尽可能多的匹配，也就是先吞噬整个剩余字符串，然后从右向左一个个的回溯尝试  \n懒惰模式尽可能少的匹配，从左向右一个个匹配  \n对于str1来说，re1能得到比re2更长的字符串，  \n对于str2来说，re1和re2的结果等效，re1还比re2所用的步骤少一些\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>回溯失控</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>失控情况1：不完整的html页面代码\n/&lt;html&gt;[\\s\\S]*?&lt;head&gt;[\\s\\S]*?&lt;\\/head&gt;[\\s\\S]*?&lt;body&gt;[\\s\\S]*?&lt;\\/body&gt;[\\s\\S]*?&lt;\\/html&gt;/\n该正则对于完整的html页面工作良好\n\n如果页面中的标签缺失，则正则将大量回溯，可能导致浏览器假死崩溃等\n\n比如遗漏了&lt;/html&gt;，则最后一个[\\s\\S]*?扩展到字符串末尾且无法匹配成功\n\n此时正则不会结束匹配过程，而是回溯到倒数第二个[\\s\\S]*?，并将其扩展到字符串末尾，尝试 &quot;....&lt;/body&gt;...&lt;/body&gt;...&lt;/html&gt;&quot; 的情况\n\n上一步过程失败后将从右至左以此把其他[\\s\\S]*?扩展到字符串末尾并失败，从而引发失控\n\n/&lt;html&gt;(?:(?!&lt;head&gt;)[\\s\\S])*&lt;head&gt;(?:(?!&lt;title&gt;)[\\s\\S])*&lt;title&gt;(?:(?!&lt;\\/title&gt;)[\\s\\S])*&lt;\\/title&gt;(?:(?!&lt;\\/head&gt;)[\\s\\S])*&lt;\\/head&gt;(?:(?!&lt;body&gt;)[\\s\\S])*&lt;body&gt;(?:(?!&lt;\\/body&gt;)[\\s\\S])*&lt;\\/body&gt;(?:(?!&lt;\\/html&gt;)[\\s\\S])*&lt;\\/html&gt;/\n解决方法1: 用 一个包含正向否定查找的非捕获分组 代替了[\\s\\S]*?\n\n这种结构阻塞了下一个所需的标签，但为每个匹配字符多次正向查找缺乏效率\n\n消除了潜在的回溯失控，且匹配短字符串时良好，但对实际html文件效率没有提高，可能依然要正向预查找上千次\n\n/&lt;html&gt;(?=([\\s\\S]*?&lt;head&gt;))\\1(?=([\\s\\S]*?&lt;title&gt;))\\2(?=([\\s\\S]*?&lt;\\/title&gt;))\\3(?=([\\s\\S]*?&lt;\\/head&gt;))\\4(?=([\\s\\S]*?&lt;body&gt;))\\5(?=([\\s\\S]*?&lt;\\/body&gt;))\\6[\\s\\S]*?&lt;\\/html&gt;/\n解决方法2：用 正向肯定查找和匹配环节替换 模拟原子组\n\n该方法更优于‘解决方法1’\n\n匹配环节替换的 后向引用\\x 语法在“捕获和非捕获分组”中介绍过\n\n在javascript中不支持其他有些语言中的 原子组(atomic groups)，或称 “贪婪子表达式”，\n但可以通过 (?=(pattern))\\x 模拟；其特点是其中的分组中的任何回溯点都将被丢弃\n\n遗漏了&lt;/html&gt;，则最后一个[\\s\\S]*?扩展到字符串末尾，且整个表达式立即失败，因为没有位置可以回溯了\n\n失控情况2：嵌套量词\n/(A+A+)+B/.test(&#39;AAAAAAAAAA&#39;)\n一个典型的例子如上所示\n\n第一个A+匹配全部、第一个匹配9个第二个匹配1个、第一个匹配m个第二个匹配n个再重复分组 等各种情况\n\n最坏的情况下其复杂度为2的n次方，20个长度的A就会回溯百万次，足够造成某些浏览器的崩溃\n\n较好的写法是 /AA+B/\n\n同样，使用模拟原子组，也可以很好的解决问题 /((?=(A+A+))\\2)+B/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p><strong>正则表达式的优化</strong></p><blockquote><p>调试正则时需要考虑的两个因素是准确性和效率：精确匹配需要的文本，并且速度要快</p></blockquote><ul><li>正则的性能因目标文本的不同而差异很大，测试时应尽量使用接近实际的文本</li><li>慢往往由过多失败引起，应多考虑让匹配尽快失败的方案</li><li>以简单而明确的字元开头，比如^ 等，避免用分支开头</li><li>尽量具体化，能用[a-z\\r\\n]<em>的就不用.</em></li><li>分支尽可能少而短，并尽量用速度更快的字符集合取代之；比如用[cb]at代替cat|bat，或用[\\s\\S]代替(.|\\r|\\n)；常用字符放在集合的前面</li><li>在不需要引用括号内文本的时候，尽量用非捕获分组</li><li>使用预查找和正确的量词避免回溯失控</li><li>将需要重用的正则赋给变量，而不是每次重新创建</li><li>将复杂的表达式拆分为简单的片段，并避免一个表达式做太多事情</li><li>能用字符串方法直接解决的不要用正则处理</li></ul>',33),e={render:function(n,s){return t}}}}]);