"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[5789],{2041:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-911acb36",path:"/web/ES6.html",title:"ES6",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"let, const",slug:"let-const",children:[]},{level:2,title:"class, extends, super",slug:"class-extends-super",children:[]},{level:2,title:"arrow function",slug:"arrow-function",children:[]},{level:2,title:"destructuring",slug:"destructuring",children:[]},{level:2,title:"default, rest",slug:"default-rest",children:[]},{level:2,title:"import export",slug:"import-export",children:[]},{level:2,title:"promise",slug:"promise",children:[]}],filePathRelative:"web/ES6.md",git:{updatedTime:1640938515e3,contributors:[]}}},5957:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h1><p><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank">ES6入门教程</a></p><h2 id="let-const" tabindex="-1"><a class="header-anchor" href="#let-const" aria-hidden="true">#</a> let, const</h2><p>let则实际上为js新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;zach&#39;</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;obama&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment">//obama</span>\n    <span class="token keyword">break</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment">//zach</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br> 当我们尝试去改变用const声明的常量时，浏览器就会报错。<br> const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> monent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moment&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="class-extends-super" tabindex="-1"><a class="header-anchor" href="#class-extends-super" aria-hidden="true">#</a> class, extends, super</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;animal&#39;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">says</span><span class="token punctuation">(</span><span class="token parameter">say</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">&#39; says &#39;</span> <span class="token operator">+</span> say<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nanimal<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">//animal says hello</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ncat<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">//cat says hello</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p><p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p><p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><p>P.S 如果你写react的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个component都是一个继承React.Component的类。</p><h2 id="arrow-function" tabindex="-1"><a class="header-anchor" href="#arrow-function" aria-hidden="true">#</a> arrow function</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//ES5</span>\n<span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//ES6</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    x<span class="token operator">++</span><span class="token punctuation">;</span>\n    y<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>x<span class="token operator">++</span><span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br> 并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><h2 id="destructuring" tabindex="-1"><a class="header-anchor" href="#destructuring" aria-hidden="true">#</a> destructuring</h2><p>更多参考点<a href="https://developer.mozilla.org/zh-CN/docs/Web/js/Reference/Operators/Destructuring_assignment" target="_blank">这里</a></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>es5<span class="token operator">:</span>\n<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token string">&#39;ken&#39;</span>\n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token string">&#39;lili&#39;</span>\n<span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">{</span>cat<span class="token operator">:</span> cat<span class="token punctuation">,</span> dog<span class="token operator">:</span> dog<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">)</span>  <span class="token comment">//Object {cat: &quot;ken&quot;, dog: &quot;lili&quot;}</span>\n\nes6<span class="token operator">:</span>\n<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token string">&#39;ken&#39;</span>\n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token string">&#39;lili&#39;</span>\n<span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">{</span>cat<span class="token punctuation">,</span> dog<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">)</span>  <span class="token comment">//Object {cat: &quot;ken&quot;, dog: &quot;lili&quot;}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;animal&#39;</span><span class="token punctuation">,</span> many<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> many<span class="token punctuation">}</span> <span class="token operator">=</span> dog\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> many<span class="token punctuation">)</span>   <span class="token comment">//animal 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="default-rest" tabindex="-1"><a class="header-anchor" href="#default-rest" aria-hidden="true">#</a> default, rest</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">es5</span><span class="token operator">:</span>\n<span class="token keyword">function</span> <span class="token function">animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token string">&#39;cat&#39;</span>  \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function-variable function">es6</span><span class="token operator">:</span>\n<span class="token keyword">function</span> <span class="token function">animal</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n<span class="token keyword">function</span> <span class="token function">animals</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>types</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">animals</span><span class="token punctuation">(</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fish&#39;</span><span class="token punctuation">)</span> <span class="token comment">//[&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="import-export" tabindex="-1"><a class="header-anchor" href="#import-export" aria-hidden="true">#</a> import export</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//index.js</span>\n<span class="token keyword">import</span> animal <span class="token keyword">from</span> <span class="token string">&#39;./content&#39;</span>\n\n<span class="token comment">//content.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;A cat&#39;</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;A cat&#39;</span>    \n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Hello!&#39;</span>\n<span class="token punctuation">}</span>    \n<span class="token keyword">export</span> <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span> \n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token keyword">import</span> animal<span class="token punctuation">,</span> <span class="token punctuation">{</span> say<span class="token punctuation">,</span> type <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./content&#39;</span>  \n<span class="token keyword">let</span> says <span class="token operator">=</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>says<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>animal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  \n<span class="token comment">//The dog says Hello to A cat</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//常见用法</span>\n<span class="token comment">// Name Export | Name Import</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>\n\n<span class="token comment">// Default Export | Default Import</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;value&#39;</span>\n<span class="token keyword">import</span> anyName <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>\n\n<span class="token comment">// Rename Export | NameImport</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> newName <span class="token punctuation">}</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> newName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>\n\n<span class="token comment">// Name + Default | Import All</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;value&#39;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anyName <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>\n\n<span class="token comment">// Export List + Rename | Import List + Rename</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>\n  name1<span class="token punctuation">,</span>\n  name2 <span class="token keyword">as</span> newName2\n<span class="token punctuation">}</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  name1 <span class="token keyword">as</span> newName1<span class="token punctuation">,</span>\n  newName2\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;...&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> promise</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> myFirstPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span>\n    <span class="token comment">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;成功!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代码正常执行！</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;因为我大于0.25小于0.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//异常</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;因为我小于0.25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//异常</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//捕捉结果</span>\nmyFirstPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">successMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//successMessage的值是上面调用resolve(...)方法传入的值.</span>\n    <span class="token comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Yay! &quot;</span> <span class="token operator">+</span> successMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">failMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//failMessage的值是上面调用reject(...)方法传入的值.</span>\n    <span class="token comment">//failMessage参数不一定非要是字符串类型，这里只是举个例子</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;oh no! 失败了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 记录失败原因</span>\nmyFirstPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',27),t={render:function(n,s){return p}}}}]);