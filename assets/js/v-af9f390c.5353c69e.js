"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[2950],{5296:(l,e,i)=>{i.r(e),i.d(e,{data:()=>r});const r={key:"v-af9f390c",path:"/web/flex&grid.html",title:"flex&grid",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"flex",slug:"flex",children:[]},{level:2,title:"grid",slug:"grid",children:[]}],filePathRelative:"web/flex&grid.md",git:{updatedTime:1629206407e3,contributors:[]}}},8777:(l,e,i)=>{i.r(e),i.d(e,{default:()=>t});const r=(0,i(6252).uE)('<h1 id="flex-grid" tabindex="-1"><a class="header-anchor" href="#flex-grid" aria-hidden="true">#</a> flex&amp;grid</h1><h2 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> flex</h2><ul><li><p><code>display: grid | inline-grid;</code></p><ol><li>没有为父元素设置宽度，所以父元素的宽度为100%，而高度则是由子元素撑开，既高度自适应。</li><li>未给父元素设置宽高，但是父元素的宽高会跟根据子元素而自适应。</li></ol></li><li><p>容器的属性</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></li><li><p>flex-direction属性决定主轴的方向（即项目的排列方向）<br><code>flex-direction: row | row-reverse | column | column-reverse;</code></p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li><li><p>flex-wrap属性定义，如果一条轴线排不下，如何换行<br><code>flex-wrap: nowrap | wrap | wrap-reverse;</code></p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul></li><li><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap<br><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</code></p></li><li><p>justify-content属性定义了项目在主轴上的对齐方式<br><code>justify-content: flex-start | flex-end | center | space-between | space-around;</code></p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li><p>align-items属性定义项目在交叉轴上如何对齐<br><code>align-items: flex-start | flex-end | center | baseline | stretch;</code></p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li><li><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用<br><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</code></p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></li><li><p>项目的属性</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></li><li><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><code>order: &lt;integer&gt;;</code></p></li><li><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><code>flex-grow: &lt;number&gt;; /* default 0 */</code><br> 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br><code>flex-shrink: &lt;number&gt;; /* default 1 */</code><br> 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。</p></li><li><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><code>flex-basis: &lt;length&gt; | auto; /* default auto */</code></p></li><li><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br><code>flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</code><br> 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p></li><li><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;</code><br> 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p></li></ul><h2 id="grid" tabindex="-1"><a class="header-anchor" href="#grid" aria-hidden="true">#</a> grid</h2>',4),t={render:function(l,e){return r}}}}]);