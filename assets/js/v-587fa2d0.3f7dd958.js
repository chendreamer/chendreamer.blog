"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[2478],{872:(e,n,r)=>{r.r(n),r.d(n,{data:()=>s});const s={key:"v-587fa2d0",path:"/interview/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",title:"Vue源码学习笔记",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"响应式原理",slug:"响应式原理",children:[]},{level:2,title:"vue简易构建流程分析",slug:"vue简易构建流程分析",children:[]},{level:2,title:"生命周期",slug:"生命周期",children:[]},{level:2,title:"观察者",slug:"观察者",children:[]}],filePathRelative:"interview/Vue源码学习笔记.md",git:{updatedTime:1640340231e3,contributors:[]}}},9862:(e,n,r)=>{r.r(n),r.d(n,{default:()=>h});var s=r(6252),a=r(5981),l=r(9062),t=r(8403);const i=(0,s._)("h1",{id:"vue源码学习笔记",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#vue源码学习笔记","aria-hidden":"true"},"#"),(0,s.Uk)(" Vue源码学习笔记")],-1),b=(0,s._)("h2",{id:"响应式原理",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#响应式原理","aria-hidden":"true"},"#"),(0,s.Uk)(" 响应式原理")],-1),_=(0,s._)("p",null,[(0,s._)("img",{src:a,alt:"blockchain",title:"响应式原理"}),(0,s._)("br"),(0,s.Uk)(" 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 "),(0,s._)("strong",null,"Object.defineProperty"),(0,s.Uk)(" 把这些 property 全部转为 "),(0,s._)("strong",null,"getter/setter"),(0,s.Uk)("。"),(0,s._)("br"),(0,s.Uk)(" 每个组件实例都对应一个 "),(0,s._)("strong",null,"watcher"),(0,s.Uk)(" 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。"),(0,s._)("br"),(0,s._)("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank"},"Object.defineProperty使用说明")],-1),c=(0,s._)("h2",{id:"vue简易构建流程分析",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#vue简易构建流程分析","aria-hidden":"true"},"#"),(0,s.Uk)(" vue简易构建流程分析")],-1),u=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"<div id=\"todo-list-app\">\n  <ol>\n    <todo-item\n      v-for=\"item in groceryList\"\n      v-bind:todo=\"item\"\n      v-bind:key=\"item.id\"\n    ></todo-item>\n  </ol>\n</div>\n\nconst TodoList = {\n  data() {\n    return {\n      groceryList: [\n        { id: 0, text: 'Vegetables' },\n        { id: 1, text: 'Cheese' },\n        { id: 2, text: 'Whatever else humans are supposed to eat' }\n      ]\n    }\n  }\n}\n\n//此处为vue的根组件，也是vue的入口\nconst app = Vue.createApp(TodoList)\n\n//注册组件，然后就可以绑定到根组件中\napp.component('todo-item', {\n  props: ['todo'],\n  template: `<li>{{ todo.text }}</li>`\n})\n\n//将整个vue对象绑定到元素上，vm代表组件实例\nvar vm = app.mount('#todo-list-app')\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"31"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"32"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"33"),(0,s._)("br")])],-1),p=(0,s._)("h2",{id:"生命周期",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#生命周期","aria-hidden":"true"},"#"),(0,s.Uk)(" 生命周期")],-1),d=(0,s._)("p",null,[(0,s._)("img",{src:l,alt:"blockchain",title:"lifecycle"})],-1),o=(0,s._)("h2",{id:"观察者",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#观察者","aria-hidden":"true"},"#"),(0,s.Uk)(" 观察者")],-1),m=(0,s._)("p",null,[(0,s._)("img",{src:t,alt:"blockchain",title:"observer"}),(0,s.Uk)(" 可以看到上边这张图，不难看出最主要的部分就是Observer模块和Directive模块。Observer负责做数据层面的响应式及依赖收集。而Directive即compiler模块下的部分，负责做指令解析和DOM渲染。搞懂这两部分，就搞懂了Vue的一个框架思想。")],-1),h={render:function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[i,b,_,c,u,p,d,o,m],64)}}},9062:(e,n,r)=>{e.exports=r.p+"assets/img/lifecycle.4a919f74.png"},8403:(e,n,r)=>{e.exports=r.p+"assets/img/observer.d7fb3ab5.jpg"},5981:(e,n,r)=>{e.exports=r.p+"assets/img/响应式原理.a2a2377d.png"}}]);